
------------LEAVE DUBLICATE CECK  --remove dublicate if found
SELECT EMP_ID , ADATE FROM 
(SELECT  B.ADATE, A.EMPLOYEE_ID EMP_ID, TRUNC(APPLIED_FROM_DATE) APPLIED_FROM_DATE, TRUNC(APPLIED_TO_DATE) APPLIED_TO_DATE, 
TO_NUMBER(TO_CHAR(B.ADATE,'DD')) DAY_ID, TO_NUMBER(TO_CHAR(B.ADATE,'MM')) MONTH_ID, TO_NUMBER(TO_CHAR(B.ADATE,'YYYY')) YEAR_ID
FROM LEAVE_APPLICATION A, DATE_OF_MONTH B
WHERE TRUNC(B.ADATE) BETWEEN  TRUNC(APPLIED_FROM_DATE) AND TRUNC(APPLIED_TO_DATE)
AND A.YSN_APPROVED = 1
AND TRUNC(B.ADATE)  BETWEEN TRUNC(SYSDATE,'MM') AND  LAST_DAY(TRUNC(SYSDATE))
ORDER BY B.ADATE ASC)
GROUP BY EMP_ID , ADATE 
HAVING COUNT(*) > 1

--Leave Status change after approve        
DECLARE
    V_MON_FIRST_DATE DATE := '01-MAR-2024';
    V_DATE DATE := LAST_DAY(TRUNC(V_MON_FIRST_DATE));
   CURSOR C1 IS
    SELECT APPLICATION_ID,
    EMPLOYEE_ID,
    LEAVE_TYPE_ID,
    CASE WHEN TRUNC(APPLIED_FROM_DATE) < TRUNC( V_MON_FIRST_DATE) THEN TRUNC( V_MON_FIRST_DATE) ELSE APPLIED_FROM_DATE END APPLIED_FROM_DATE,
    CASE WHEN TRUNC( APPLIED_TO_DATE) >  TRUNC(V_DATE) THEN   TRUNC(V_DATE) ELSE APPLIED_TO_DATE END APPLIED_TO_DATE,
    EXTRACT( DAY FROM (CASE WHEN TRUNC( APPLIED_TO_DATE) >  TRUNC(V_DATE) THEN   TRUNC(V_DATE) ELSE APPLIED_TO_DATE END - CASE WHEN TRUNC(APPLIED_FROM_DATE) < TRUNC( V_MON_FIRST_DATE) THEN TRUNC( V_MON_FIRST_DATE) ELSE APPLIED_FROM_DATE END)) + 1 AS DAYCOUNT,
    APPROVED_STATUS
     FROM LEAVE_APPLICATION
     WHERE  APPROVED_STATUS = 'Y' AND  EMPLOYEE_ID  IN( SELECT EMP_ID FROM EMP_INFO)
     AND (CASE WHEN TRUNC(APPLIED_FROM_DATE) < TRUNC( V_MON_FIRST_DATE) THEN TRUNC( V_MON_FIRST_DATE) ELSE APPLIED_FROM_DATE END  BETWEEN TRUNC(V_MON_FIRST_DATE) AND TRUNC(V_DATE))
     AND (CASE WHEN TRUNC( APPLIED_TO_DATE) >  TRUNC(V_DATE) THEN  TRUNC(V_DATE) ELSE APPLIED_TO_DATE END  BETWEEN TRUNC(V_MON_FIRST_DATE) AND TRUNC(V_DATE))
--     AND EMPLOYEE_ID = 546876
     ORDER BY EMPLOYEE_ID ASC;
BEGIN
    FOR I IN C1 LOOP
        PRC_STATUS_CHANGE_AFTER_LEAVE_APPROVE(I.APPLICATION_ID);
        COMMIT;
    END LOOP;
END;

--Movement Status change after approve      
DECLARE
    V_MON_FIRST_DATE DATE := '01-MAY-2024';
    V_DATE DATE := LAST_DAY(TRUNC(V_MON_FIRST_DATE));
    CURSOR C1 IS 
    SELECT MOVE_ID APPLICATION_ID
    FROM OFFICIAL_MOVEMENT
    WHERE (TRUNC(START_TIME) BETWEEN V_MON_FIRST_DATE AND V_DATE OR TRUNC(END_TIME) BETWEEN V_MON_FIRST_DATE AND V_DATE);
    
BEGIN
    FOR I IN C1 LOOP
        PRC_STATUS_CHANGE_AFTER_MOVEMENT_APPROVE(I.APPLICATION_ID);
        COMMIT;
    END LOOP;
END;


-- Meal cancle on specific date
 DECLARE
    CURSOR C1 IS
        SELECT ID
        FROM CAFETERIA_DETAILS
        -- UPDATE CAFETERIA_DETAILS SET MEAL_COUNT = 0
        WHERE MEAL_DATE IN ('13-JUL-2024', '17-JUL-2024', '20-JUL-2024', '21-JUL-2024', '22-JUL-2024', '23-JUL-2024');
BEGIN
    FOR I IN C1 LOOP
        PRC_SQL_MEAL_INSERT(P_MEAL_ID => I.ID, P_STATUS => 2);
        COMMIT;
    END LOOP;
END;

---Loan data check 
SELECT EMP_ID, FULL_NAME,DEPT_DESC_LONG, DESIG_NAME,LOC_NAME,COMP_CODE, LOAN_TYPE, INSTALLMENT_AMOUNT
FROM LOAN_APPLICATION A, LOAN_SCHEDULE_M B, EMP_PROFILE_ALL C, LOAN_TYPE D
WHERE A.LOAN_APPLICATION_ID = B.LOAN_APPLICATION_ID
AND A.EMPLOYEE_ID = C.EMP_ID
AND A.LOAN_TYPE_ID = D.LOAN_TYPE_ID
AND     B.YEAR = 2024
AND     B.MONTH = 5
AND     B.YSN_INSTALLMENT_STATUS = 0
AND     C.EMP_STATUS = 1
AND     C.YSN_SALARYHOLD = 0

---Bank Account check
SELECT * FROM EMP_PROFILE_ALL
WHERE EMP_STATUS = 1
AND YSN_SALARYHOLD = 0
AND (ROUTING_NO IS NULL 
    OR BANK_NAME IS NULL 
    OR BANK_ID IS NULL 
    OR BANK_BRANCH_NAME IS NULL  
    OR ACNT_NO IS NULL )


--department, designation or other check
SELECT * FROM EMP_PROFILE_ALL
WHERE EMP_STATUS = 1
AND YSN_SALARYHOLD = 0
AND (DEPARTMENT_ID IS NULL OR DESIGNATION_ID IS NULL OR LOCATION_ID IS  NULL OR JOB_TYPE_ID IS  NULL)



---Fare Price shope data insert before salary generate
INSERT INTO AEFPS_DUE_AMOUNT (AEFPS_ID, EMP_ID, AMOUNT, WH_ID)
SELECT "intid", "intEnroll", "monAmount", "intWH"
FROM tblAEFPSAmount@HSLINKHR

---Attendance dily summery check
SELECT A.EMP_ID, A.D DAY_COUNT, TRUNC(B.JOINING_DATE ) - TRUNC(TO_DATE('31/07/2024','DD/MM/YYYY'),'MM')  JOIN_DAY, 
A.D +  TRUNC(B.JOINING_DATE ) - TRUNC(TO_DATE('31/07/2024','DD/MM/YYYY'),'MM')  TOTAL_DAY,
B.JOINING_DATE
FROM (
SELECT EMP_ID,   SUM(CASE WHEN IS_PRESENT = 1 THEN 1 ELSE 0 END) + 
                SUM( CASE WHEN IS_MOVEMENT = 1 THEN 1 ELSE 0 END) +
                SUM( CASE WHEN IS_HOLIDAY = 1 THEN 1 ELSE 0 END) +
                SUM( CASE WHEN IS_OFFDAY = 1 THEN 1 ELSE 0 END) +
                SUM( CASE WHEN IS_ABSENT = 1 THEN 1 ELSE 0 END) +
                SUM( CASE WHEN IS_LEAVE = 1 THEN 1 ELSE 0 END) D
FROM ATTENDANCE_DAILY_SUMMARY
WHERE YEAR = 2024
AND     MONTH_ID = 7
group by EMP_ID) A, EMP_PROFILE_ALL B
WHERE A.EMP_ID = B.EMP_ID
AND A.D <> 31
AND A.D+  TRUNC(B.JOINING_DATE ) - TRUNC(TO_DATE('31/07/2024','DD/MM/YYYY'),'MM')  <> 31
AND EMP_STATUS = 1
ORDER BY JOINING_DATE